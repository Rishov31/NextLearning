import { createSlice } from "@reduxjs/toolkit";

const initialState = {
  user: null,
  isAuthenticated: false,
}; 

const authSlice = createSlice({
  name: "authSlice",
  initialState,
  reducers: { //here we define the actions--
    userLoggedIn: (state, action) => { 
        state.user = action.payload.user; 
        state.isAuthenticated = true;
    },
    userLoggedOut:(state) => {
        state.user = null;
        state.isAuthenticated = false;
    }
  },
});

export const {userLoggedIn, userLoggedOut} = authSlice.actions;
export default authSlice.reducer;

/*
  Explaination: --

  This code defines a Redux slice using the createSlice function provided by @reduxjs/toolkit. 
  The slice manages authentication-related state (e.g., user information and authentication status) in a Redux store. 
  Let's break it down step by step:

  1. initialState :
  const initialState = {
    user: null,
    isAuthenticated: false,
  };
  Purpose: This defines the initial state of the slice.
  Structure:
    user: Represents the currently logged-in user's data. Initially set to null because no user is logged in.
    isAuthenticated: A boolean flag to track whether the user is logged in. Itâ€™s initially set to false.

2. createSlice
  The createSlice function simplifies the process of creating Redux slices by:
    Defining the state,
    Defining reducers (functions to modify the state), and
    Automatically generating action creators.


Parameters:
name:
The name of the slice, "authSlice".
This is used as a prefix for the action types (e.g., authSlice/userLoggedIn).
initialState:
Sets the starting state for this slice.
reducers:
Contains "reducers" or "state update logic" that defines how the state is modified in response to specific actions.
Each reducer is a function that takes state (current slice state) and action (dispatched action data) as arguments.

3. Reducers and Actions
  The reducers object defines the two actions for managing the authentication state:
  1. userLoggedIn
  userLoggedIn: (state, action) => { 
      state.user = action.payload.user; 
      state.isAuthenticated = true;
  }
  Triggered when the user logs in.
  Updates the state:
  Sets state.user to the user's data provided in action.payload.user.
  Sets state.isAuthenticated to true.
  2. userLoggedOut
   userLoggedOut: (state) => {
      state.user = null;
      state.isAuthenticated = false;
  }
  Triggered when the user logs out.
  Updates the state:
  Resets state.user to null.
  Sets state.isAuthenticated to false.

4. Action Creators
  export const { userLoggedIn, userLoggedOut } = authSlice.actions;

  createSlice automatically generates action creators for each reducer.
  Example:
  userLoggedIn(payload) creates an action like { type: 'authSlice/userLoggedIn', payload }.
  userLoggedOut() creates an action like { type: 'authSlice/userLoggedOut' }.

5. Reducer
export default authSlice.reducer;

The authSlice.reducer is the reducer function generated by createSlice.
It processes actions like userLoggedIn and userLoggedOut to update the state.
Exported as the default export to be used in the Redux store.
*/